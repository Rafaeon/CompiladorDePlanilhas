Descrição Detalhada das Funções
1. def load_spreadsheet(file_path):
Esta função é responsável por carregar uma planilha individual com base no caminho do arquivo fornecido.

Parâmetro:

file_path: O caminho para o arquivo da planilha.
Funcionamento:

Verifica se o arquivo é um .xlsx (Excel) ou .csv (CSV).
Carrega o arquivo usando a biblioteca pandas (pd.read_excel para .xlsx e pd.read_csv para .csv).
Retorna o DataFrame carregado.
Exceção:

Levanta um ValueError se o formato do arquivo não for suportado.

def load_spreadsheet(file_path):
    if file_path.endswith('.xlsx'):
        df = pd.read_excel(file_path)
    elif file_path.endswith('.csv'):
        df = pd.read_csv(file_path)
    else:
        raise ValueError('Unsupported file format')
    return df

2. def compile_spreadsheets(directory_path, output_path):
Esta função é responsável por carregar todas as planilhas de um diretório, compilá-las em um único DataFrame e salvá-las em um arquivo de saída.

Parâmetros:

directory_path: O caminho do diretório onde as planilhas estão armazenadas.
output_path: O caminho para o arquivo compilado de saída.
Funcionamento:

Cria uma lista para armazenar os DataFrames.
Itera sobre todos os arquivos no diretório especificado.
Para cada arquivo, verifica se é um .xlsx ou .csv, carrega o arquivo usando load_spreadsheet, e adiciona o DataFrame à lista data_frames.
Se nenhum DataFrame for carregado, levanta um ValueError.
Compila todos os DataFrames em um único DataFrame usando pd.concat.
Salva o DataFrame compilado no caminho de saída especificado (suporta .xlsx e .csv).

def compile_spreadsheets(directory_path, output_path):
    data_frames = []
    for filename in os.listdir(directory_path):
        file_path = os.path.join(directory_path, filename)
        if file_path.endswith('.xlsx') or file_path.endswith('.csv'):
            print(f"Loading file: {file_path}")  # Debug
            df = load_spreadsheet(file_path)
            print(f"Loaded dataframe shape: {df.shape}")  # Debug
            data_frames.append(df)
    
    if not data_frames:
        raise ValueError('No spreadsheets loaded')

    compiled_df = pd.concat(data_frames, ignore_index=True)
    print(f"Compiled dataframe shape: {compiled_df.shape}")  # Debug
    
    if output_path.endswith('.xlsx'):
        compiled_df.to_excel(output_path, index=False)
    elif output_path.endswith('.csv'):
        compiled_df.to_csv(output_path, index=False)
    else:
        raise ValueError('Unsupported file format')
    print(f"Data compiled and saved to {output_path}")  # Debug

3. def main():
Esta é a função principal que orquestra o carregamento, compilação e salvamento das planilhas.

Funcionamento:
Define o diretório de entrada onde as planilhas estão armazenadas (input_directory).
Define o arquivo de saída onde a planilha compilada será salva (output_file).
Chama a função compile_spreadsheets passando os caminhos de entrada e saída.

def main():
    input_directory = 'data/'  # Diretório onde estão suas planilhas
    output_file = 'compiled_spreadsheet.xlsx'  # Arquivo de saída

    compile_spreadsheets(input_directory, output_file)

if __name__ == "__main__":
    main()


Adicionando Novas Variáveis
Se você deseja adicionar novas variáveis, siga estas etapas para evitar quebrar o código:

Defina a Nova Variável no Local Apropriado:

Por exemplo, se você deseja adicionar uma variável para especificar um filtro de data, defina-a no início da função main ou compile_spreadsheets.
Integre a Nova Variável no Fluxo de Trabalho:

Certifique-se de que a nova variável seja usada corretamente nas funções.
Por exemplo, se você estiver adicionando um filtro de data, integre a lógica de filtragem após carregar cada DataFrame.
Teste o Novo Comportamento:

Execute o script com diferentes valores para a nova variável para garantir que ela esteja funcionando conforme o esperado.
Exemplo: Adicionando um Filtro de Data
Vamos adicionar uma variável para filtrar dados por uma data específica.

import os
import pandas as pd

def load_spreadsheet(file_path):
    if file_path.endswith('.xlsx'):
        df = pd.read_excel(file_path)
    elif file_path.endswith('.csv'):
        df = pd.read_csv(file_path)
    else:
        raise ValueError('Unsupported file format')
    return df

def compile_spreadsheets(directory_path, output_path, date_filter=None):
    data_frames = []
    for filename in os.listdir(directory_path):
        file_path = os.path.join(directory_path, filename)
        if file_path.endswith('.xlsx') or file_path.endswith('.csv'):
            print(f"Loading file: {file_path}")  # Debug
            df = load_spreadsheet(file_path)
            print(f"Loaded dataframe shape: {df.shape}")  # Debug
            if date_filter and 'date_column' in df.columns:
                df = df[df['date_column'] >= date_filter]
                print(f"Filtered dataframe shape: {df.shape}")  # Debug
            data_frames.append(df)
    
    if not data_frames:
        raise ValueError('No spreadsheets loaded')

    compiled_df = pd.concat(data_frames, ignore_index=True)
    print(f"Compiled dataframe shape: {compiled_df.shape}")  # Debug
    
    if output_path.endswith('.xlsx'):
        compiled_df.to_excel(output_path, index=False)
    elif output_path.endswith('.csv'):
        compiled_df.to_csv(output_path, index=False)
    else:
        raise ValueError('Unsupported file format')
    print(f"Data compiled and saved to {output_path}")  # Debug

def main():
    input_directory = 'data/'  # Diretório onde estão suas planilhas
    output_file = 'compiled_spreadsheet.xlsx'  # Arquivo de saída
    date_filter = '2023-01-01'  # Filtro de data (exemplo)

    compile_spreadsheets(input_directory, output_file, date_filter)

if __name__ == "__main__":
    main()
